*eregex.txt*

    File:       eregex.vim, eregex_e.vim
    Author:     AKUTSU toshiyuki <locrian@mbd.ocn.ne.jp>
    Maintainer: othree <othree@gmail.com>
    Version:    2.56
    Required:   Vim version 6.1
    Note:       eregex.vim 用来转换正则表达式标记风格，
                eregex_e.vim 为 eregex.vim 映射命令。

1.  License                | eregex-license-to-use          |
2.  安装                   | eregex-installations           |
3.  功能                   | eregex-functions               |
4.  命令                   | eregex-commands                |
5.  使用                   | eregex-examples                |
6.  键盘映射               | eregex-keymappings             |
7.  理念                   | eregex-principle               |
8.  转换表                 | eregex-table                   |
9.  可选项                 | eregex-options                 |
10. 多行                   | eregex-multiline               |
11. 分隔符限制             | eregex-limitation-of-delimiter |
12. 关于 Vim 的正则表达式  | eregex-about-vimregex          |

==============================================================================
1. License                                     *eregex-license-to-use*

    Copyright of eregex.vim and eregex_e.vim belongs to AKUTSU toshiyuki.
    It is free to change and redistribute this script. You can think as an
    GPL License software.

    Author will not take any responsibility for damages due to using this
    script (eregex.vim, eregex_e.vim).

==============================================================================
2. 安装                                *eregex-installations*

    用 Vim 打开 eregex.vba 然后运行下面的命令：
>
    :so %
<

==============================================================================
3. 功能                                   *eregex-functions*   *eregex*
                                               *E2v()*
E2v({extendedregex} [, {iISCDMm}])

    返回 Vim 正则表达式标记
>
    :let vimregex = E2v('(?<=abc),\d+,(?=xzy)','i')
    :echo vimregex
<
    在 |eregex-options| 或 |eregex-multiline| 中可以查看可选项的值

E2v("","V")
    返回 eregex.vim 版本号
>
    :echo E2v('','V')
    248
<
E2v({replacement}, {R1,R2,R3})
    返回 :S/pattern/to/ 中的 "to" 部分。
>
    E2v('\r,\n,\&,&,\~,~', 'R1') => \n,\r,\&,&,\~,~
    E2v('\r,\n,\&,&,\~,~', 'R2') => \r,\n,&,\&,~,\~
    E2v('\r,\n,\&,&,\~,~', 'R3') => \n,\r,&,\&,~,\~
<

==============================================================================
4. 命令                                       *eregex-commands*
                                                            *:E2v*
:[range]E2v [iISCDMm]
    将正则表达式扩展为 Vim 风格。
    用扩展后的 Vim 风格正则表达式替换 [range]

                                                            *:M*
:M/eregex[/{offset} [iISCDMm]]
    匹配
    :M/<span class="foo">.*?<\/span>/Im
    ==> /\C<span class="foo">\_.\{-}<\/span>

                                                            *:S*
:[range]S/{eregex}/{string}/[&cegpriISCDMm]
    替换
    :'<,'>S/(\d{1,3})(?=(\d\d\d)+($|\D))/\1,/g
    ==> :'<,'>s/\(\d\{1,3}\)\%(\(\d\d\d\)\+\($\|\D\)\)\@=/\1,/g

                                                            *:G*  *:G!*
:[range]G/{eregex}/{command}
:[range]G!/{eregex}/{command}
    全局
    :G/<<-(["'])?EOD\1/,/^\s*EOD\>/:left 8
    ==> :g/<<-\(["']\)\=EOD\1/,/^\s*EOD\>/:left 8

                                                            *:V*
:[range]V/{eregex}/{command}
    V 全局

==============================================================================
5. 使用                                        *eregex-examples*

(1) :E2v 命令

    改变光标所在行的正则表达式标记风格。

(\d{1,3})(?=(\d\d\d)+($|\D))

光标移动到该行，然后运行 :E2v 命令， 会将当前行改变为：

\(\d\{1,3}\)\%(\(\d\d\d\)\+\($\|\D\)\)\@=


(2) :M 命令
>
    :M/<Items\s+attr="media">.+?<\/Items>/Im
<
        :normal! /\C<Items[ \t\r\n^L]\+attr="media">\_.\{-1,}<\/Items>

    <Items attr="media">
        <item name="cdrom" price="90" />
        <item name="cdrw" price="500" />
        <item name="dvd" price="1000" />
    </Items>


(3) :S 命令
>
    :'<,'>S/(\d{1,3})(?=(\d\d\d)+($|\D))/\1,/g
<
        :'<,'>s/\(\d\{1,3}\)\%(\(\d\d\d\)\+\($\|\D\)\)\@=/\1,/g

    1            -->   1
    12           -->   12
    123          -->   123
    1234         -->   1,234
    12345        -->   12,345
    123456       -->   123,456
    1234567      -->   1,234,567
    12345678     -->   12,345,678
    123456789    -->   123,456,789

(4) :G 命令
>
    :G/^begin$/+1;/^end$/-1:S/\l+/\U&/g
<
        :g/^begin$/+1;/^end$/-1:s/\l\+/\U&/g

开始：
    hello world.
    hello world wide web.
    hello The Internet.
结果：

    |begin
    |    HELLO WORLD.
    |    HELLO WORLD WIDE WEB.
    |    HELLO THE INTERNET.
    |end

(5) :V 命令
    Skipped.

==============================================================================
6. 键盘映射                                        *eregex-keymappings*

    你可以添加下列键盘映射来使用 / 代替在命令行输入 :/M

nnoremap / :M/
nnoremap ? :M?
nnoremap ,/ /
nnoremap ,? /

    "/" 会使用 :M/ 来搜索。 ",/" 会使用 Vim 原始的 "/".

    --------------------
    将下面设置添加到你的 ~/.vimrc 
    let eregex_replacement=3
    会使 :S 应用下列规则：

:S/pattern/\r,\n,\&,&,\~,~/ 
:s/pattern/\n,\r,&,\&,~,\~/

   +--------------------+-----------------------------+
   | eregex_replacement | :S/pattern/\n,\r,&,\&,~,\~/ |
   +--------------------+-----------------------------+
   | 0                  | :s/pattern/\n,\r,&,\&,~,\~/ |
   | 1                  | :s/pattern/\r,\n,&,\&,~,\~/ |
   | 2                  | :s/pattern/\n,\r,\&,&,\~,~/ |
   | 3                  | :s/pattern/\r,\n,\&,&,\~,~/ |
   +--------------------+-----------------------------+


==============================================================================
7. 理念                                     *eregex-principle*
eregex.vim 关于 "逻辑或"，"重复" 和 "分组" 采用扩展正则表达式风格。


==============================================================================
8. 转换表                                 *eregex-table*

    左侧是 Perl 风格，右侧是 Vim 风格 ('magic')。

逻辑或
--------------------
    :M/a|b             /a\|b

重复
--------------------
    :M/a*              /a*
    :M/a+              /a\+
    :M/a?              /a\=

    :M/a*?             /a\{-}
    :M/a+?             /a\{-1,}
    :M/a??             /a\{-,1}

    :M/a{3,5}          /a\{3,5}
    :M/a{3,}           /a\{3,}
    :M/a{,5}           /a\{,5}

    :M/a{3,5}?         /a\{-3,5}
    :M/a{3,}?          /a\{-3,}
    :M/a{,5}?          /a\{-,5}

分组
--------------------
    :M/(abc)           /\(abc\)
    :M/(?:abc)         /\%(abc\)
    :M/(?<=abc)        /\%(abc\)\@<=
    :M/(?<!abc)        /\%(abc\)\@<!
    :M/(?=abc)         /\%(abc\)\@=
    :M/(?!abc)         /\%(abc\)\@!
    :M/(?>abc)         /\%(abc\)\@>

特殊字符
--------------------
    :M/\\,\|,\(,\),\{,\},\?,\+,\*,\[,\]           /\\,|,(,),{,},?,+,\*,\[,\]
    :M/\^,\$                                      /\^,\$

暂不支持
--------------------
    \A, \b, \B, \G, \Z, \z
    Vim 不支持 (?i:a) 和 (?-i)

不可用的 Vim 正则表达式标记
--------------------
    \%(re\) and square rackets
    ~	matches the last given substitute string
    \m	'magic' 在匹配模式中对后续字符使用 magic
    \M	'magic' 在匹配模式中对后续字符使用 nomagic
    \v	在匹配模式中的后续字符使用 "very magic"
    \V	在匹配模式中的后续字符使用 "very nomagic"

    \x	十六进制:			[0-9A-Fa-f]
                \\x[0-9A-Fa-f]{1,2} 转换为字符
                \x82\xa0  => 'あ' ( shift-jis, cp932 )
                但 0x00 0x0a 0x08 不会改变。

可用的 Vim 正则表达式标记
--------------------
    \d, \D, \w, \W, \s, \S, \a, \A, \u, \U, \b, ...
    \<, \>, \zs, \ze
    \_[a-z], \%[abc], [[:alpha:]], \_., \_^, \_$
    \%23l, \%23c, \%23v, \%#

==============================================================================
9. 特殊选项和原子                      *eregex-options*
    Note:   "^L" is \x0c

    eregex.vim         Vim
---------------------------------------
    :M/a/i             /\ca/
    :M/\ca/            /\ca/
    :M/a/I             /\Ca/
    :M/\Ca/            /\Ca/

    :M/\s/S            /[ \t\r\n^L]
    :M/\S/S            /[^ \t\r^L]
    :M/[^az]/C         /\_[^az]/
    :M/\W/C            /\_W/
    :M/./D             /\_./

    :M/\s[^az]./M      /[ \t\r\n^L]\_[^az]./
    :M/\s[^az].\M/     同上

    :M/\s[^az]./m      /[ \t\r\n^L]\_[^az]\_./
    :M/\s[^az].\m/     同上

+--------+------+--------------------------------------------------------+
| 选项    | 原子 | 笔记                                                   |
+--------+------+--------------------------------------------------------+
| /i     | \c   | 大小写不敏感                                            |
| /I     | \C   | 大小写敏感                                              |
+--------+------+--------------------------------------------------------+
| /S     |      | \s 和 \S 变为 [ \t\r\n^L] 和 [^ \t\r^L]                 |
| /C     |      | [] 会匹配断行                                           |
| /D     |      | 点号会匹配断行                                           |
+--------+------+--------------------------------------------------------+
| /M     | \M   | 使用 /S 和 /C . 部分支持多行                              |
| /m     | \m   | 使用 /S, /C 和 /D . 全部支持多行                          |
+--------+------+--------------------------------------------------------+

    Note:
        (A)   Option /iImM
        (B)   \c, \C, \m, \M
        (C)   (?i), (?I), (?m), (?M)
        如果你同时使用以上选项，优先级以顺序为准
        如果你使用 (?M) 和 (?m)， 圆括号中的 \s 会失效。

==============================================================================
10. 多行                                     *eregex-multiline*

+-----+----------------------------------------------+--------------------+
| Num | eregex.vim      => vim regex                 | ruby regex         |
+-----+----------------------------------------------+--------------------+
| (1) | :M/a\s[^az].z/  => /a\s[^az].z/              | /a[ \t][^az\n].z/  |
+-----+----------------------------------------------+--------------------+
|     | :M/a\s[^az].z/S => /a[ \t\r\n^L][^az].z/     | /a\s[^az\n].z/     |
|     | :M/a\s[^az].z/C => /a\s\_[^az].z/            | /a[ \t][^az].z/    |
|     | :M/a\s[^az].z/D => /a\s[^az]\_.z/            | /a[ \t][^az\n].z/m |
+-----+----------------------------------------------+--------------------+
| (2) | :M/a\s[^az].z/M => /a[ \t\r\n^L]\_[^az].z/   | /a\s[^az].z/       |
| (3) | :M/a\s[^az].z/m => /a[ \t\r\n^L]\_[^az]\_.z/ | /a\s[^az].z/m      |
+-----+----------------------------------------------+--------------------+

    (1) 是 Vim  风格 character class.
    (2) 是 Ruby 风格 character class.
    (3) 是 Ruby 风格 multiline.

    Note:
        在 Vim 风格正则表达式中， /[^az]/ 不会匹配断行。
        但匹配断行时用 /[^az\n]/ 是不正确的。 
        /[^az\n]/ 会匹配断行
        所以我们可以使用 /[^ \t\r^L]/ 代替 /[^ \t\r\n^L]/
        只需记住不要在 [^...] 里写 \n

==============================================================================
11. 分隔符限制                     *eregex-limitation-of-delimiter*

    :M 只支持 / 和 ? .
    :S, :G 和 :V 支持 /, #, @ .
    用法和限制与 :s, :g 和 :v 一样。

    使用 @ 分隔符会有更多限制。

    例子:
    将 "foo@bar.baz.co.jp" 替换为 "foo@hoge.co.jp" 会失败。
>
    :%s@\<foo\@bar\.baz\.co\.jp\>@foo\@hoge.co.jp@Ig
<
    \@ 在 Vim 风格正则表达式中有特殊意义。
==============================================================================
12. 关于 Vim 正则表达式                 *eregex-about-vimregex*

    下例全在一行中，并包含内容 "111,222,333"。
    并使用 :S 来进行替换。


(1)Regular submatch 正则匹配子集

111,222,333
>
    :S/(\d+),(\d+),(\d+)/\=submatch(1) + submatch(2) + submatch(3)
<
666

(2)Vim 特性
    匹配数据($&, &, matchdata) 和匹配子集可以是分开的。
    使用 \zs 和 \ze 
    更多信息见 :h /\zs

111,222,333
>
    :S/(\d+),\zs\d+\ze,(\d+)/\=submatch(1) + submatch(0) + submatch(2)
<
111,666,333


(3)
    另一个例子

111,222,333
>
    :S/(\d+),\zs(\d+)\ze,(\d+)/\=submatch(1) + submatch(2) + submatch(3)
<
111,666,333

    使用 \zs 和 \ze 控制匹配数据和匹配子集。

(4) \_x 

    \u is [A-Z] 
    \_u is [A-Z\n] 
    \_[A-Z] is [A-Z\n] 

    不匹配大写字母和断行
    \_U  == \_[^A-Z]

    \_. 指任意字符，包括断行。


(5) ^ 和 \_^ 或 $ 和 \_$ 之间的不同

    以 $ 为例

    $ 用在下列位置
        (1) 正则表达式的最后
        (2) 右括号 ) 之前
        (3) 逻辑或 | 之前

    \_$ 匹配断行可以用在正则表达式中的任何位置

111,222,333
>
  :S/(\d+),(\d+),(\d+)\zs\_$\ze/\=',' . (submatch(1) + submatch(2) + submatch(3))
<
111,222,333,666

    在本例中如果使用 $ 而不是 \_$ 会有不同的结果
    Note:
        \_^ 和 \_$ 与 /m 在 Perl 正则表达式中是完全不同的。


==============================================================================
13. Changes
revision 2.56
    (1) Add support for "?"

-- vim:ft=help:
